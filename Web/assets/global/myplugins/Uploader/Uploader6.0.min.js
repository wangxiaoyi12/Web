(function (a) {
    var i = {
        url: "",
        isImg: true,
        targetExt: ".png",
        tempFile: "/content/tempfile/",
        error: function (l) {
            alert(l)
        }
    };
    var j = function (n, o) {
        var l = this;
        var m = {
            url: i.url,
            text: "选择文件",
            type: "single",
            handleType: "0",
            subfolder: "",
            more: false,
            debug: true,
            maxWidth: 1960,
            maxHeight: 1000,
            minWidth: 300,
            minHeight: 300,
            tempFile: i.tempFile,
            auto: true,
            isImg: true,
            fileExts: "jpg;png;gif;bmp;jpeg",
            timeout: 30000,
            onStart: function () { },
            onSuccess: function (p) { },
            onError: function (p) {
                i.error(p)
            },
            onClick: function () { },
            maxSize: 1024 * 1024 * 1024,
            getMaxSize: function () {
                return e(this.maxSize)
            },
            coverParams: {}
        };
        this.elem = n;
        this.opts = a.extend({}, m, o)
    };
    j.prototype = {
        init: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            if (m.type == "dialog") {
                n.initDialog()
            } else {
                n.initBtn()
            }
        },
        initBtn: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var q = d("uploader_text");
            q.text(m.text);
            l.append(q);
            var o = d("uploader_file");
            var p = a('<input  type="file" name="file"  tabindex="10000"/>');
            if (m.more) {
                p.prop("multiple", "multiple")
            }
            o.append(p);
            o.append('<input type="hidden" name="target" class="target" />');
            l.append(o);
            if (l.next().hasClass("uploader_panel") == false) {
                l.after(d("uploader_panel"))
            }
            if (m.type == "imgdouble") {
                n.initImgDouble()
            } else {
                n.bindBtn()
            }
        },
        bindBtn: function () {
            var n = this;
            var l = this.elem;
            var m = this.opts;
            var o = l.find("input[type=file]")[0];
            o.onchange = function () {
                if (this.files.length <= 0) {
                    m.onError("没有获取到上传文件");
                    return
                }
                var q = this.files;
                if (m.more) {
                    var u = [];
                    for (var r = 0; r < q.length; r++) {
                        var p = q[r];
                        var t = new g(p, n, false);
                        u.push(t)
                    }
                    var r = 0;
                    var s = 0;
                    v();
                    var w = setInterval(function () {
                        if (s - r > 2) {
                            return
                        }
                        v()
                    }, 1000);
                    function v() {
                        var x = u[r];
                        x.start();
                        x.onSendSuccess = function () {
                            s++
                        }
                        ;
                        r++;
                        if (r >= q.length) {
                            clearInterval(w)
                        }
                    }
                } else {
                    var p = this.files[0];
                    var t = new g(p, n, n.opts.auto)
                }
            }
        },
        initDialog: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            l.text(m.text);
            l.click(function () {
                n.cover = new c(n)
            })
        },
        initImgDouble: function () {
            var n = this;
            var l = this.elem;
            var m = this.opts;
            l.append('<canvas id="canvasImg" style="display:none;"/>');
            var o = l.find("input[type=file]");
            o.change(function () {
                var q = this.files;
                if (m.more) {
                    var s = -1;
                    var r = 0;
                    var t = setInterval(function () {
                        if (r > s) {
                            var u = q[r];
                            if (b(u.name, m)) {
                                n.bindImgDouble(u, function () {
                                    r++
                                })
                            }
                        }
                        if (r == q.length - 1) {
                            clearInterval(t)
                        }
                        s = r
                    }, 100)
                } else {
                    var p = q[0];
                    if (b(p.name, m) == false) {
                        return false
                    }
                    n.bindImgDouble(p)
                }
            })
        },
        bindImgDouble: function (q, r) {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var o = document.getElementById("canvasImg");
            var p = o.getContext("2d");
            var s = new FileReader();
            s.onload = function () {
                var u = s.result;
                var t = new Image();
                t.onload = function () {
                    var x = t.width;
                    var w = t.height;
                    if (x > m.maxWidth) {
                        w = w * (m.maxWidth / x);
                        x = m.maxWidth
                    }
                    if (w > m.maxHeight) {
                        x = x * (m.maxHeight / w);
                        w = m.maxHeight
                    }
                    t.width = o.width = x;
                    t.height = o.height = w;
                    p.clearRect(0, 0, x, w);
                    p.drawImage(t, 0, 0, x, w);
                    var v = o.toDataURL("image/jpeg");
                    m.targetExt = ".jpg";
                    if (m.handleType != 0) {
                        m.subfolder2 = "/big"
                    }
                    k(n, v, "image/jpeg", function (y) {
                        var z = {};
                        z.big = y;
                        if (x > m.minWidth) {
                            w = w * (m.minWidth / x);
                            x = m.minWidth
                        }
                        if (w > m.minHeight) {
                            x = x * (m.minHeight / w);
                            w = m.minHeight
                        }
                        t.width = o.width = x;
                        t.height = o.height = w;
                        p.clearRect(0, 0, x, w);
                        p.drawImage(t, 0, 0, x, w);
                        v = o.toDataURL("image/jpeg");
                        if (m.handleType != 0) {
                            m.subfolder2 = "/small"
                        }
                        k(n, v, "image/jpeg", function (A) {
                            z.small = A;
                            n.imgDoubleSuccess(z);
                            if (r) {
                                r(A)
                            }
                        })
                    })
                }
                ;
                t.src = u
            }
            ;
            s.readAsDataURL(q)
        },
        imgDoubleSuccess: function (n) {
            var m = this;
            var l = this.opts;
            if (l.onSuccess) {
                l.onSuccess(n)
            }
        }
    };
    function c(q) {
        var m = this;
        m.uploader = q;
        var o = {
            title: "上传图片",
            itemWidth: 380,
            itemHeight: 380,
            targetWidth: 200,
            targetHeight: 100,
            onYes: function () { },
            onCancel: function () { },
            onClose: function () {
                return true
            }
        };
        this.opts = a.extend({}, o, m.uploader.opts.coverParams);
        var l = this.opts;
        m.initWidth = 0;
        m.initHeight = 0;
        m.scale = 1;
        m.spanBackLeft = 0;
        m.spanBackTop = 0;
        var p = a(d("contentElem"));
        l.width = l.itemWidth + 20 + l.targetWidth + 30 + 20;
        l.height = l.itemHeight + 30 + 35 + 20;
        var n = a.cover({
            width: l.width,
            height: l.height,
            borderRadius: 0,
            clickDestroy: false,
            html: p
        });
        this.elem = p;
        this.cover = n;
        this.init()
    }
    c.prototype = {
        init: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            n.initTop();
            var o = d("uploader_middle");
            l.append(o);
            n.initLeftItem();
            n.initRightItem();
            o.append(d("clear"));
            n.initBottom();
            n.bind()
        },
        bind: function () {
            var n = this;
            var l = this.elem;
            var m = this.opts;
            var p = document.getElementById("canvasSource");
            var r = p.getContext("2d");
            var s = l.find(".imgItem");
            var q = s.find("#canvasUp");
            var o = s.find(".canvasBack");
            var u = false;
            var w = 0
              , x = 0;
            q.mousedown(function (y) {
                u = true;
                w = y.pageX - q.offset().left;
                x = y.pageY - q.offset().top;
                return false
            });
            o.mouseup(function (y) {
                u = false;
                t = false
            }).mousemove(function (A) {
                if (u) {
                    var D = A.pageX - s.offset().left - w;
                    var E = A.pageY - s.offset().top - x;
                    n.setCanvasUpSite(D, E)
                }
                if (t) {
                    var y = A.clientX;
                    var z = A.clientY;
                    var B = y - v;
                    var C = z - oldY;
                    n.spanBackLeft += B;
                    n.spanBackTop += C;
                    r.translate(B, C);
                    n.reShow();
                    v = y;
                    oldY = z
                }
            }).mouseleave(function () {
                u = false;
                t = false
            });
            addMouseWheel(o[0], function (y) {
                var A = y.delta > 0 ? 0.1 : -0.1;
                var B = n.initWidth * n.scale;
                var z = n.initHeight * n.scale;
                if (A < 0) {
                    if (B * z <= (n.initWidth * n.initHeight / 2)) {
                        return
                    }
                } else {
                    if (B * z >= (n.img.width * n.img.height * 1.5)) {
                        return
                    }
                }
                n.scale += A;
                n.reShow();
                return false
            });
            var t = false;
            var v = oldY = 0;
            o.mousedown(function (y) {
                t = true;
                v = y.clientX;
                oldY = y.clientY
            });
            n.bindSquare();
            n.bindDrag()
        },
        bindSquare: function () {
            var n = this;
            var l = this.elem;
            var m = this.opts;
            var u = l.find(".imgItem");
            var p = u.find("#canvasUp");
            var o = p.parent();
            var v = -1
              , A = 0
              , B = 0
              , z = 0
              , w = 0
              , x = 0
              , y = 0;
            var q = u.find(".divSquare");
            q.mousedown(function (D) {
                C(1, D);
                return false
            });
            var r = u.find(".divSquare_lb");
            r.mousedown(function (D) {
                C(2, D);
                return false
            });
            var s = u.find(".divSquare_lt");
            s.mousedown(function (D) {
                C(3, D);
                return false
            });
            var t = u.find(".divSquare_rt");
            t.mousedown(function (D) {
                C(4, D);
                return false
            });
            o.mousemove(function (D) {
                var G = 20;
                var H = D.pageX;
                var I = D.pageY;
                var J = rHeight = rLeft = rTop = 0;
                if (v == 1) {
                    var K = H - A;
                    var L = K * (m.targetHeight / m.targetWidth);
                    J = K + z;
                    rHeight = L + w;
                    rLeft = x;
                    rTop = y
                } else {
                    if (v == 2) {
                        var L = I - B;
                        var K = -L * (m.targetWidth / m.targetHeight);
                        J = z - K;
                        rHeight = w + L;
                        rLeft = x + K;
                        rTop = y
                    } else {
                        if (v == 3) {
                            var K = H - A;
                            var L = K * (m.targetHeight / m.targetWidth);
                            J = z - K;
                            rHeight = w - L;
                            rLeft = x + K;
                            rTop = y + L
                        } else {
                            if (v == 4) {
                                var L = I - B;
                                var K = -L * (m.targetWidth / m.targetHeight);
                                J = z + K;
                                rHeight = w - L;
                                rLeft = x;
                                rTop = y + L
                            } else {
                                return
                            }
                        }
                    }
                }
                var F = o.width() - p.position().left;
                var E = o.height() - p.position().top;
                J = J > F ? F : J;
                rHeight = rHeight > E ? E : rHeight;
                rLeft = rLeft < 0 ? 0 : rLeft;
                rTop = rTop < 0 ? 0 : rTop;
                J = J < m.targetWidth ? m.targetWidth : J;
                rHeight = rHeight < m.targetHeight ? m.targetHeight : rHeight;
                p.css({
                    left: rLeft,
                    top: rTop
                });
                p.attr("width", J).attr("height", rHeight);
                n.showTarget();
                n.setSquareSite();
                return false
            }).mouseup(function (D) {
                v = -1;
                return false
            }).mouseleave(function () {
                v = -1;
                return false
            });
            function C(E, D) {
                v = E;
                A = D.pageX;
                B = D.pageY;
                x = p.position().left;
                y = p.position().top;
                z = p.width();
                w = p.height()
            }
        },
        bindDrag: function () {
            var m = this;
            var l = this.elem.get(0);
            var o = this.elem.parents(".coverInner");
            document.ondragover = function () {
                return false
            }
            ;
            document.ondrop = function () {
                return false
            }
            ;
            l.ondragenter = function (p) {
                return false
            }
            ;
            l.ondragover = function () {
                o.addClass("coverInner-hot");
                return false
            }
            ;
            l.ondrop = function (p) {
                var r = p.dataTransfer.files;
                if (r.length > 0) {
                    var q = r[0];
                    if (n(q) == false) {
                        return false
                    }
                    var s = new FileReader();
                    s.onload = function () {
                        m.showImg(s.result)
                    }
                    ;
                    s.readAsDataURL(q)
                }
                o.removeClass("coverInner-hot");
                return false
            }
            ;
            function n(p) {
                if (!/image\/\w+/.test(p.type)) {
                    error(p.name + "-----不是图片");
                    return false
                }
                return true
            }
        },
        initTop: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var q = d("top");
            var p = d("title");
            p.text(m.title);
            q.append(p);
            var o = d("closeBtn");
            o.append('<a href="javascript:void(0)" title="关闭">×</a>');
            o.click(function () {
                var r = m.onClose();
                if (r) {
                    n.destroy()
                }
            });
            q.append(o);
            l.append(q)
        },
        initLeftItem: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var w = l.find(".uploader_middle");
            var v = d("leftItem");
            w.append(v);
            v.css({
                width: m.itemWidth,
                height: m.itemHeight
            });
            var y = d("uploadItem");
            var x = d("upBtnDiv");
            var o = d("btnDesc");
            o.text("将图片拖入框中即可读取");
            x.append(o);
            x.append(d("uploader"));
            y.append(x);
            var s = d("extention");
            var t = "";
            if (n.uploader.opts.fileExts != "*") {
                t = "*仅支持" + n.uploader.opts.fileExts + ","
            }
            s.text(t + "不超过" + e(n.uploader.opts.maxSize));
            x.append(s);
            v.append(y);
            var u = d("imgItem");
            u.css({
                width: m.itemWidth,
                height: m.itemHeight,
                position: "relative"
            });
            var p = a('<canvas id="canvasSource" width="' + m.itemWidth + '" height="' + m.itemHeight + '"></canvas>');
            p.css({
                position: "absolute"
            });
            u.append(p);
            var q = d("canvasBack");
            q.css({
                width: m.itemWidth,
                height: m.itemHeight
            });
            var r = a('<canvas id="canvasUp" width="' + m.targetWidth + '" height="' + m.targetHeight + '"></canvas>');
            q.append(r);
            q.append(d("divSquare"));
            q.append(d("divSquare_lb"));
            q.append(d("divSquare_lt"));
            q.append(d("divSquare_rt"));
            u.append(q);
            u.hide();
            v.append(u);
            n.initBtn()
        },
        initRightItem: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var p = l.find(".uploader_middle");
            var r = d("rightItem");
            p.append(r);
            var q = d("previewDiv");
            var t = d("targetOneItem");
            var s = d("targetOne");
            var o = a('<canvas id="canvasTarget"><canvas/>');
            o.attr("width", m.targetWidth).attr("height", m.targetHeight);
            s.append(o);
            var u = d("targetText");
            u.text("" + m.targetWidth + "px * " + m.targetHeight + "px");
            t.append(s).append(u);
            q.append(t);
            r.append(q)
        },
        initBottom: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var o = d("uploader_btnDiv");
            l.append(o);
            var q = a('<span class="uploader_yes"/>');
            q.text("确定");
            q.click(function () {
                var r = a(this);
                if (r.text() == "正在提交...") {
                    return
                }
                n.submit();
                r.text("正在提交...")
            });
            var p = a('<span  class="uploader_cancel"/>');
            p.text("取消");
            p.click(function () {
                m.onCancel(n);
                n.destroy()
            });
            o.append(q).append(p)
        },
        initBtn: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var o = l.find(".uploader");
            o.addClass("uploader-default");
            o.append(d("uploader_text").text("选择图片"));
            var p = d("uploader_file");
            var q = a('<form enctype="multipart/form-data"/>');
            q.append('<input  type="file" name="file" tabindex="10000"  />');
            p.append(q);
            p.append('<input type="hidden" name="target" class="target" />');
            o.append(p);
            addMouseWheel(l[0], function (r) {
                try {
                    r.preventDefault()
                } catch (r) {
                    return false
                }
            });
            n.bindRead()
        },
        bindRead: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var o = l.find("input[type=file]");
            o.change(function () {
                var r = a(this).val();
                if (b(r, n.uploader.opts) == false) {
                    return false
                }
                var p = this.files[0];
                var q = new FileReader();
                q.onload = function () {
                    n.showImg(q.result)
                }
                ;
                q.readAsDataURL(p)
            })
        },
        setCanvasUpSite: function (o, r) {
            var l = this;
            var n = a("#canvasUp");
            var m = n.parent();
            var p = m.width() - n.width() - 1;
            var q = m.height() - n.height() - 1;
            o = o > p ? p : o;
            r = r > q ? q : r;
            o = o < 0 ? 0 : o;
            r = r < 0 ? 0 : r;
            o = Math.round(o) + 1;
            r = Math.round(r) + 1;
            n.css({
                left: o,
                top: r
            });
            l.setSquareSite();
            l.showTarget()
        },
        setSquareSite: function () {
            var l = a("#canvasUp");
            a(".divSquare").css({
                left: l.position().left + l.width() - 2,
                top: l.position().top + l.height() - 2
            });
            a(".divSquare_lb").css({
                left: l.position().left - 2,
                top: l.position().top + l.height() - 2
            });
            a(".divSquare_lt").css({
                left: l.position().left - 2,
                top: l.position().top - 2
            });
            a(".divSquare_rt").css({
                left: l.position().left + l.width() - 2,
                top: l.position().top - 2
            })
        },
        showImg: function (o) {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var r = l.find(".leftItem");
            var s = l.find(".uploadItem");
            var q = l.find(".imgItem");
            var p = new Image();
            p.onload = function () {
                s.hide();
                q.show();
                var t = l.find(".uploader_btnDiv");
                if (t.find(".uploader").length == 0) {
                    var u = l.find(".uploader");
                    t.prepend(u.clone(true));
                    u.remove()
                }
                n.imgReadedInit()
            }
            ;
            p.src = o;
            n.img = p;
            n.initWidth = n.initHeight = 0;
            n.scale = 1
        },
        imgReadedInit: function () {
            var n = this;
            var m = this.opts;
            var l = this.elem;
            var r = n.img;
            var s = l.find(".imgItem");
            var o = document.getElementById("canvasSource");
            var q = o.getContext("2d");
            var x = 0
              , u = 0
              , v = 0
              , w = 0;
            if (r.width <= m.targetWidth || r.height <= m.targetHeight) {
                x = r.width;
                u = r.height;
                w = (s.height() - u) / 2 + 1;
                v = (s.width() - x) / 2 + 1
            } else {
                if (r.width > r.height) {
                    x = s.width();
                    var t = x / r.width;
                    u = r.height * t;
                    w = (s.height() - u) / 2 + 1
                } else {
                    u = s.height();
                    var t = u / r.height;
                    x = r.width * t;
                    v = (s.width() - x) / 2 + 1
                }
            }
            q.clearRect(0, 0, o.width, o.height);
            v = Math.round(v);
            w = Math.round(w);
            x = Math.round(x);
            u = Math.round(u);
            if (n.initWidth == 0) {
                n.initWidth = x;
                n.initHeight = u
            }
            n.reShow();
            q.drawImage(r, v, w, x, u);
            setTimeout(function () {
                n.showTarget()
            }, 100);
            var p = a("#canvasUp");
            n.setCanvasUpSite((s.width() - p.width()) / 2, (s.height() - p.height()) / 2)
        },
        reShow: function () {
            var l = this;
            var n = document.getElementById("canvasSource");
            var p = n.getContext("2d");
            var m = l.elem.find(".canvasBack");
            var q = m.width();
            var o = m.height();
            var u = l.initWidth * l.scale;
            var r = l.initHeight * l.scale;
            var s = Math.round((q - u) / 2);
            var t = Math.round((o - r) / 2);
            p.clearRect(-l.spanBackLeft, -l.spanBackTop, q, o);
            p.drawImage(l.img, s, t, u, r);
            l.showTarget()
        },
        showTarget: function () {
            var n = a("#canvasUp");
            var t = n.position().left;
            var u = n.position().top;
            var v = n.width();
            var s = n.height();
            var l = document.getElementById("canvasSource");
            var o = l.getContext("2d");
            var r = o.getImageData(t, u, v, s);
            var q = n[0].getContext("2d");
            q.putImageData(r, 0, 0);
            var m = document.getElementById("canvasTarget");
            var p = m.getContext("2d");
            p.clearRect(0, 0, m.width, m.height);
            p.rect(0, 0, m.width, m.height);
            p.fillStyle = "white";
            p.fill();
            p.drawImage(n[0], 0, 0, m.width, m.height)
        },
        submit: function () {
            var m = this;
            var l = this.uploader.opts;
            var n = document.getElementById("canvasTarget").toDataURL("image/jpeg", 1);
            m.total = n.length;
            l.targetExt = ".jpg";
            k(m.uploader, n, "image/jpg", function (o) {
                if (l.onSuccess) {
                    l.onSuccess(o)
                }
                m.destroy();
                m.elem.find(".uploader_yes").text("确定")
            }, function () {
                console.info("上传失败")
            })
        },
        destroy: function () {
            this.cover.destroy()
        }
    };
    function k(t, p, r, v, u) {
        var l = t.opts;
        var o = p.split(",")[1];
        o = window.atob(o);
        var m = new Uint8Array(o.length);
        for (var q = 0; q < o.length; q++) {
            m[q] = o.charCodeAt(q)
        }
        var n = new Blob([m], {
            type: r
        });
        var w = new h(t, undefined, undefined);
        w.onopen = function () {
            var x = {
                oldName: "前台处理图片" + l.targetExt,
                size: n.size,
                subfolder: l.subfolder + (l.subfolder2 || ""),
                handleType: l.handleType,
                other: "",
            };
            w.send(JSON.stringify(x));
            w.send(n)
        }
        ;
        var s = 0;
        w.onmessage = function (x) {
            var y = JSON.parse(x);
            s += y.curLength || 0;
            if (s >= n.size) {
                w.close();
                v(y)
            }
        }
    }
    function g(n, o, m) {
        var l = this;
        this.uploader = o;
        this.file = n;
        this.step = 1024 *1024 * 256;
        this.loaded = 0;
        this.readed = 0;
        this.enableRead = m || false;
        this.startTime = new Date();
        this.total = n.size;
        this.debug = o.opts.debug;
        if (this.check()) {
            this.init();
            if (l.enableRead) {
                l.start()
            }
        }
    }
    g.prototype = {
        check: function () {
            var m = this;
            var l = this.uploader.opts;
            if (this.total > l.maxSize) {
                l.onError("文件大小不能超过：" + l.getMaxSize());
                return false
            }
            return b(m.file.name, l);
            return true
        },
        init: function () {
            var l = this;
            var n = this.uploader.elem.next();
            var m = d("uploader_item");
            this.elem = m;
            m.append('<div class="title"><span class="file-icon"></span> <span class="file-name">' + this.file.name + "</span></div>");
            m.append('<div class="uploader-progress"><progress></progress></div>');
            var p = d("status");
            p.append('<div class="left"><span class="btn-proc">暂停</span></div>');
            var o = d("right");
            o.append('<span id="loaded">0</span>/<span class="total">' + e(this.total) + "</span>");
            o.append("&emsp;");
            o.append('<span class="time-proc">0</span>');
            p.append(o);
            p.append('<div class="clear"></div>');
            m.append(p);
            m.append('<span class="close">&times;</span>');
            n.append(m);
            l.showStatus();
            m.find(".btn-proc").click(function () {
                var q = a(this);
                if (q.text() == "暂停") {
                    q.text("开始");
                    l.stop()
                } else {
                    q.text("暂停");
                    l.containue()
                }
            });
            m.find(".close").click(function () {
                if (window.confirm("关闭将会放弃上传！")) {
                    l.close();
                    m.slideUp("normal", function () {
                        m.remove()
                    })
                }
            })
        },
        start: function () {
            var l = this;
            l.enableRead = true;
            var m = new h(l.uploader, this);
            this.socket = m;
            m.onopen = function () {
                l.bindReader()
            }
            ;
            m.onmessage = function (n) {
                var o = JSON.parse(n);
                l.result = o;
                if (o.newName.length > 0 && o.status == 1) {
                    l.newName = o.newName || "";
                    l.loaded += o.curLength || 0;
                    l.showStatus();
                    if (l.loaded >= l.total) {
                        l.sendSuccess();
                        console.log("总上传：" + l.loaded + ",用时：" + (new Date().getTime() - l.startTime.getTime()) / 1000)
                    }
                } else {
                    console.error("上传出错：");
                    console.error(o)
                }
            }
        },
        showStatus: function () {
            var l = this;
            var m = l.elem;
            if (l.enableRead == false) {
                return
            }
            var o = m.find("progress")[0];
            o.value = l.loaded;
            o.max = l.total;
            var n = m.find("#loaded");
            n.text(e(l.loaded));
            var p = m.find(".time-proc");
            var q = (new Date().getTime() - l.startTime.getTime()) / 1000;
            p.text(f(q))
        },
        bindReader: function () {
            var l = this;
            var m = this.reader = new FileReader();
            m.onload = function (n) {
                l.readed += n.loaded;
                l.sendData();
                if (l.readed < l.total) {
                    if (l.socket.ws.bufferedAmount > 1204 * 1024 * 2) {
                        var o = setInterval(function () {
                            if (l.socket.ws.bufferedAmount <= 1204 * 1024) {
                                console.log("------>进入等待结束");
                                clearInterval(o);
                                l.readBlob()
                            }
                        }, 10)
                    } else {
                        l.readBlob()
                    }
                } else {
                    if (l.debug) {
                        console.log("总读取：" + l.readed + ",用时：" + (new Date().getTime() - l.startTime.getTime()) / 1000)
                    }
                }
            }
            ;
            l.readBlob()
        },
        sendData: function () {
            var m = this;
            var l = this.uploader.opts;
            var p = this.reader;
            var q = this.socket;
            var n = p.result;
            if (m.loaded == 0) {
                var o = {
                    oldName: m.file.name,
                    newName: m.newName,
                    size: m.total,
                    subfolder: l.subfolder,
                    handleType: l.handleType,
                    other: "",
                };
                q.send(JSON.stringify(o))
            }
            q.send(n)
        },
        onSendSuccess: function () { },
        sendSuccess: function () {
            var m = this;
            m.elem.find(".btn-proc").off("click").html('<span style="color:red;">上传成功</span>');
            setTimeout(function () {
                m.elem.slideUp("fast", function () {
                    m.elem.remove()
                }).fadeOut("fast")
            }, 1500);
            m.close();
            var l = m.uploader.opts;
            if (l.onSuccess) {
                l.onSuccess(m.result)
            }
            m.onSendSuccess()
        },
        readBlob: function () {
            var l = this;
            if (l.enableRead == false) {
                return
            }
            var m = this.file.slice(this.readed, this.readed + this.step);
            this.reader.readAsArrayBuffer(m)
        },
        stop: function () {
            var l = this;
            if (l.debug) {
                console.info("中止，loaded:" + l.loaded)
            }
            l.enableRead = false;
            l.reader.abort()
        },
        containue: function () {
            var l = this;
            if (l.debug) {
                console.info("继续,loaded:" + l.loaded)
            }
            l.enableRead = true;
            l.readBlob()
        },
        close: function () {
            var l = this;
            l.stop();
            l.socket.close()
        }
    };
    function h(q, p, o) {
        var m = this;
        this.uploader = q;
        this.reader = p;
        var l = this.uploader.opts;
        this.onSuccess = o;
        this.debug = l.debug;
        var r = l.url;
        if (r == undefined || r.length <= 0) {
            alert("socket链接地址不能为空");
            return
        }
        try {
            this.url = r;
            this.ws = new WebSocket(r)
        } catch (n) {
            if (m.debug) {
                console.error(n)
            }
            console.error("创建socket链接失败，当前地址：" + r)
        }
        m.bind()
    }
    h.prototype = {
        bind: function () {
            var l = this;
            var m = l.reader;
            var n = l.ws;
            n.onopen = function () {
                console.log("connected成功");
                l.onopen();
                if (l.onSuccess) {
                    l.onSuccess()
                }
            }
            ;
            n.onmessage = function (p) {
                var o = p.data;
                l.onmessage(o)
            }
            ;
            n.onclose = function (o) {
                if (m) {
                    m.stop()
                }
                if (l.debug) {
                    console.log("链接中断")
                }
            }
            ;
            n.onerror = function (o) {
                if (m) {
                    m.stop()
                }
                if (l.debug) {
                    console.log("链接发生异常")
                }
                console.error(o)
            }
        },
        onopen: function () { },
        onmessage: function (l) { },
        close: function () {
            var l = this;
            var m = l.ws;
            m.close()
        },
        send: function (m) {
            var l = this;
            var n = l.ws;
            if (n.readyState == WebSocket.OPEN) {
                n.send(m)
            } else {
                if (l.debug) {
                    console.info("当前链接还不是打开状态:" + n.readyState);
                    console.error(n)
                }
            }
        }
    };
    function b(s, q) {
        var l = q;
        var m = l.fileExts.toLowerCase().split(";");
        var r = "文件格式不正确，仅支持：" + m.join(",");
        if (s.length <= 0) {
            return false
        }
        if (l.fileExts == "*") {
            return true
        }
        var n = s.substr(s.lastIndexOf(".") + 1).toLowerCase();
        if (n.length <= 0) {
            i.error(r);
            return false
        }
        for (var o = 0; o < m.length; o++) {
            var p = m[o];
            if (p == n) {
                return true
            }
        }
        i.error(r);
        return false
    }
    function e(l) {
        if (l >= 1073741824) {
            return (l / 1073741824).toFixed(1) + "G"
        }
        if (l >= 1048576) {
            return (l / 1048576).toFixed(1) + "Mb"
        }
        return (l / 1024).toFixed(1) + "Kb"
    }
    function f(l) {
        if (l > 60) {
            return Math.floor(l / 60) + "m " + Math.round(l % 60) + "s"
        }
        return Math.round(l) + "s"
    }
    function d(l) {
        var m = a("<div />");
        m.addClass(l);
        return m
    }
    a.fn.uploader = function (l) {
        var m = new j(this, l);
        m.init();
        return m
    }
}
)(jQuery);
(function (a) {
    a.addMouseWheel = function (b, c) {
        if (document.mozHidden !== undefined) {
            b.addEventListener("DOMMouseScroll", function (d) {
                d.delta = -(d.detail || 0) / 3;
                c(d)
            })
        } else {
            if (a.addEventListener) {
                b.addEventListener("mousewheel", function (d) {
                    d.delta = d.wheelDelta / 120;
                    c(d)
                })
            } else {
                if (a.attachEvent) {
                    b.attachEvent("onmousewheel", function (d) {
                        d.delta = d.wheelDelta / 120;
                        return c(d)
                    })
                }
            }
        }
    }
}
)(window);
